import base64
x = ( b'''from time import sleep as timeout
import socket
import os
import time
import sys
os. system("clear")
b ="\033[0;91m" #RED
f ="\033[1;92m" #GREEN
c ="\033[1;96m" #
l ="\033[1;94m" #
v ="\033[0;101m" #
#######################################################################
                            # banner
#######################################################################
def banner () :
    print (f+ " _   _ ___  _____ _     _____ ____       _   _    _    ____ _  __  ")
    time.sleep(0.1)
    print ("| | | |_ _ |_   _| |   | ____|  _ \     | | | |  / \  / ___| |/ /  ")
    time.sleep(0.1)
    print ("| |_| || |   | | | |   |  _| | |_) |____| |_| | / _ \| |   | ' /   ")
    time.sleep(0.1)
    print ("|  _  || |   | | | |___| |___|  _ <_____|  _  |/ ___ \ |___| . \   ")
    time.sleep(0.1)
    print ("|_| |_|___|  |_| |_____|_____|_| \_\    |_| |_/_/   \_\____|_|\_\  ")
    time.sleep(0.1)
    print ("                                                                   ")
    time.sleep(0.1)
    print ("                    __        _____ _____ ___            ")
    time.sleep(0.1)
    print ("                    \ \      / /_ _|  ___|_ _|           ")
    time.sleep(0.1)
    print ("                     \ \ /\ / / | || |_   | |            ")
    time.sleep(0.1)
    print ("                      \ V  V /  | ||  _|  | |            ")
    time.sleep(0.1)
    print ("                       \_/\_/  |___|_|   |___|           ")
    print("")
banner()
#######################################################################
                       #start prgraming
#######################################################################
print ("")
time.sleep(0.1)
print ("                      ==============     ")
time.sleep(0.1)
print ("                     |  +  WELCOME MY FRIEND  +  |    ")
time.sleep(0.1)
print ("                                    =============      ")
time.sleep(0.1)
print ("                                                  ")
time.sleep(0.1)
import time
time.sleep(1)
print (b+"==========================================================================")
print (f+"THIS TOOL HAS BEEM PROGRAMED BY MINA MAGDY TO PENTRATE YR WIFI SIGNAL ....")
print (b+"==========================================================================")
time.sleep(1)
print ("")
print (b+"       ====================================================")
print (f+"        THIS TOOL HAS BEEN PROGRAMED VIA PYTHON L.N.G ONLY ")
print (b+"       ====================================================")
print ("")
print (b+"            ==========================================       ")
print (f+"           | https://www.youtube.com/c/m3lomatthephone|      ")
print (b+"            ==========================================       ")
#######################################################################
def lock () :
    print ("")
    time.sleep(0.1)
    print (b+"    =================== YOU CAN GET BASSWORD IN ==================== ")
    time.sleep(0.1)
    print (f+"   |             www.m3lomatthephone.blogspot.com                   |")
    time.sleep(0.1)
    print (f+"   |         https://t.me/joinchat/NYmlVhPbCU9tfGxAeSaZ3A           |")
    time.sleep(0.1)
    print (f+"   |                   THIS TOOL BY MENA MAGDY                      |")
    time.sleep(0.1)
    print (b+"    ==================== VISIT US IN THIS ========================== ")
    time.sleep(0.1)
    print ("                                                                       ")
    time.sleep(0.1)
    print (b+ "    --------------------------------------------------------------")
    time.sleep(0.1)
    print (f+"   |         GO TO ===>> www.m3lomatthephone.blogspot.com          |")
    time.sleep(0.1)
    print (b+"    ---------------------------------------------------------------")
    print ("")
    v = input ("ENTER YOUR BASSWORD TO START ==> ")
    if v == 'BY = M3LOMAT THE PHONE':
#       or v == 'MINA' or v == 'kaliiiii' :
        os.system("clear")
        time.sleep(0.1)
        print ("")
    else:
#       t(0.1,"\n\t            PLEASE WAIT ....")
        print ("                       _______                       ")
        print ("................. ^_^ | ERORR | ^_^ .................")
        print ("                       -------                       ")
        timeout(0.3)
        print ("..................PASSWORS INCORECT.................?")
        print ("                                                     ")
        print (b+" =================== YOU CAN GET BASSWORD IN ==================== ")
        print (f+"|             www.m3lomatthephone.blogspot.com                   |")
        print (f+"|         https://t.me/joinchat/NYmlVhPbCU9tfGxAeSaZ3A           |")
        print (f+"|                   THIS TOOL BY MENA MAGDY                      |")
        print (b+" ==================== VISIT US IN THIS ========================== ")
        time.sleep(10)
        timeout(0.3)
        os.system("sudo exit")
        os.system("clear")
        os.system("python3 wifi.py")
lock ()
#######################################################################
banner()
print ("")
print (b+"==========================================================================")
print (f+"THIS TOOL HAS BEEM PROGRAMED BY MINA MAGDY TO PENTRATE YR WIFI SIGNAL ....")
print (b+"==========================================================================")
print (b+"++++++++++++++++++++++++++++++ YouTube channel ++++++++++++++++++++++++++++")
print (f+"         https://www.youtube.com/channel/UCWP0_GVEspOoqdESh_Xfjqw          ")
print (b+"+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++")
print ("")
time.sleep(1)
print (b+" (1) FOR KALI USERS ")
time.sleep(1)
print (b+" (2) FOR TERMUX USERS           | S0000000N.... |     ")
time.sleep(1)
print (b+" (3) WHO PROGRAMED THIS TOOL")

print ("")

time.sleep(1)
kal = input ("WRITE YOUR OPTIONS ==> ")
print ("")

#######################################################################
if kal == "2" :
   import os
   os. system("clear")
   print ("")
   banner()
   print ("")
   print ("          WELCOME IN THIS SESSION")
   print ("")
   print ("         CHEAK YOUR INTER NET SPEED")
   time.sleep(1)
   import os
   os.system("pkg update -y && pkg upgrade -y ")
   os.system("pkg install besside-ng -y")
   os.system("git clone ")
   #   back()

#####################################################################
if kal == "1" :
   import time
   import os
   os. system ("clear")
   banner()
   time.sleep(1)
   print ("            WELCOME IN THIS SESSION")
   print ("")
   time.sleep(1)
   print ("          CHEAK YOUR INTER NET SPEED")
   print ("                                                  ")
   print ("==================================================")
   print ("++++++++++++++++++++++++++++++++++++++++++++++++++")
   print ("|   (1) WLAN0   |   (2) WLAN1   |   (3)WLAN3     |")
   print ("++++++++++++++++++++++++++++++++++++++++++++++++++")
   print ("==================================================")
   print ("                                                  ")
   wi = input("WRITER UR INTERFACR ^_^ ===>> ")
   if wi == "1" :
       print ("")
       import os
#      os. system("sudo su -")
       time.sleep(1)
       os.system("sudo apt-get upgrade -y")
       os.system("sudo airmon-ng start wlan0")
       os.system("sudo airmon-ng start wlx00e14100e6d8")
       import os
       os.system("sudo ifconfig")
       time.sleep(1)
       os. system("clear")
       print ("=======================================================")
       print ("=======================================================")
       print ("|             PLZZZZZ WAIT ............               |")
       print ("|             WLAN0    TO     wlan0mon                |")
       print ("=======================================================")
       print ("=======================================================")
       os.system("git clone https://github.com/aircrack-ng/aircrack-ng")
       os.system("cd aircrack-ng/")
       os.system("chmod 777 *")
       os.system("sudo apt-get install build-essential autoconf automake libtool pkg-config libnl-3-dev libnl-genl-3-dev libssl-dev ethtool shtool rfkill zlib1g-dev libpcap-dev libsqlite3-dev libpcre3-dev libhwloc-dev libcmocka-dev hostapd wpasupplicant tcpdump screen iw usbutils -y")
       os.system("sudo yum install libtool pkgconfig sqlite-devel autoconf automake openssl-devel libpcap-devel pcre-devel rfkill libnl3-devel gcc gcc-c++ ethtool hwloc-devel libcmocka-devel git make file expect hostapd wpa_supplicant iw usbutils tcpdump screen -y")
       os.system("cd ..")
       os.system("clear")
       os.system("sudo besside-ng wlan0mon")
       os.system("sudo apt-get install besside-ng -y")
       print ("")
       time.sleep(1)
       banner()
       os.system("python3 wifi.py")
#####################################################################
   if wi == "2" :
       print ("")
       import os
#      os. system("sudo su -")
       time.sleep(1)
       os.system("sudo apt-get upgrade -y")
       os.system("sudo airmon-ng start wlan1")
       import os
       os.system("sudo ifconfig")
       time.sleep(1)
       os. system("clear")
       print ("=======================================================")
       print ("=======================================================")
       print ("|             PLZZZZZ WAIT ............               |")
       print ("|             WLAN1    TO     wlan1mon                |")
       print ("=======================================================")
       print ("=======================================================")
       os.system("sudo apt-get install build-essential autoconf automake libtool pkg-config libnl-3-dev libnl-genl-3-dev libssl-dev ethtool shtool rfkill zlib1g-dev libpcap-dev libsqlite3-dev libpcre3-dev>")
       os.system("sudo yum install libtool pkgconfig sqlite-devel autoconf automake openssl-devel libpcap-devel pcre-devel rfkill libnl3-devel gcc gcc-c++ ethtool hwloc-devel libcmocka-devel git make file>")
       os.system("sudo besside-ng wlan0mon")
       os.system("sudo apt-get install besside-ng -y")
       print ("")
       time.sleep(1)
       banner()
       os.system("python3 wifi.py")
#######################################################################

if wi == "3" :
       print ("")
       import os
#      os. system("sudo su -")
       time.sleep(1)
       os.system("sudo apt-get upgrade -y")
       os.system("sudo airmon-ng start wlan3")
       import os
       os.system("sudo ifconfig")
       time.sleep(1)
       os. system("clear")
       print ("=======================================================")
       print ("=======================================================")
       print ("|             PLZZZZZ WAIT ............               |")
       print ("|             WLAN3    TO     wlan3mon                |")
       print ("=======================================================")
       print ("=======================================================")
       os.system("sudo besside-ng wlan0mon")
       os.system("sudo apt-get install besside-ng -y")
       print ("")
       time.sleep(1)
       banner()
       os.system("python3 wifi.py")
######################################################################

if kal == "3" :
   import os
   os. system ("clear")
   banner()
   import time
   time.sleep(1)
   print ("")
   print ("")
   time.sleep(0.1)
   print (f+"      ╔╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╗")
   time.sleep(0.1)
   print (f+"      ╢                ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄                 ╟")
   time.sleep(0.1)
   print (f+"      ╢                ████▌▄▌▄▐▐▌█████                 ╟")
   time.sleep(0.1)
   print (f+"      ╢                ████▌▄▌▄▐▐▌▀████                 ╟")
   time.sleep(0.1)
   print (f+"      ╢                ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀                 ╟")
   time.sleep(0.1)
   print (f+"      ╢               ━━━━▣━━◤◢━━▣━━━━━                 ╟")
   time.sleep(0.1)
   print (f+"      ╢           【ツ】   WELCOME  【ツ】               ")
   time.sleep(0.1)
   print (f+"      ╔╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╗")
   time.sleep(0.1)
   print (f+"      ╢                                                 ╟")
   time.sleep(0.1)
   print (b+"      ╢               Coded By: MENA MAGDY              ╟")
   time.sleep(0.1)
   print (f+"      ╢                                                 ╟")
   time.sleep(0.1)
   print (b+"      ╢____This tool is designed via BASH  language ____╟")
   time.sleep(0.1)
   print (f+"      ╔╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╗")
   time.sleep(0.1)
   print (b+"      ╢________ Designed for Termux & Kali users________╟")
   time.sleep(0.1)
   print (f+"      ╔╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╗")
   time.sleep(0.1)
   print (b+"      ╢__For more tools and explanations follow us on___╟")
   time.sleep(0.1)
   print (f+"       _________________________________________________ ")
   time.sleep(0.1)
   print (f+"      ╢                                                 ╟")
   time.sleep(0.1)
   print (f+"      ╢                YouTube channel:                 ╟")
   time.sleep(0.1)
   print (f+"      ╢                                                 ╟")
   time.sleep(0.1)
   print (b+"      ╢_____________https://youtu.be/iTaZJtXLeaE________╟")
   time.sleep(0.1)
   print (f+"      ___________________________________________________")
   time.sleep(0.1)
   print (f+"     ╢                                                   ╟")
   time.sleep(0.1)
   print (f+"     ╢                    TELEGRAM:                      ╟")
   time.sleep(0.1)
   print (f+"     ╢                   JOIN US NOW                     ╟")
   time.sleep(0.1)
   print (b+"     ╢   https://t.me/joinchat/NYmlVhPbCU9tfGxAeSaZ3A    ╟")
   time.sleep(0.1)
   print (f+"     ╢                                                   ╟")
   time.sleep(0.1)
   print (f+"     ╚╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╧╤╤╧╤╝")
   time.sleep(0.1)
   print ("")
   print (f+"     +++++++++++++++++++++++++++++++++++++++++++++++++++++")
#   echo -n "$red"
   print (b+"                      CODED BY MENA MAGDY                  ")
#   echo -x "$green"
   print (f+"     +++++++++++++++++++++++++++++++++++++++++++++++++++++")
   print ("")
   print ("")
   time.sleep(1)
   os .system("python wifi.py")
   exit
#############################################################################
                         	#END *_*
#############################################################################
''' )
exec (base64.b64decode(x))